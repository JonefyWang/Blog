<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/Blog/2021/10/05/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/Blog/2021/10/12/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: 第一篇博客</span><br></pre></td></tr></table></figure>

<h1 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a><strong>第一篇博客</strong></h1><p>​        哈哈，第一篇博客就此诞生，折腾这么久，终于吧blog皮肤换好了，以此博客来纪念今天。</p>
<p>​       今天2021年10月12日22:01:46。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/Blog/2021/10/13/%E8%BF%87%E6%BB%A4%E5%99%A8Filter/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Filter过滤器</span><br></pre></td></tr></table></figure>

<h1 id="Filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h1><h3 id="Filter过滤器："><a href="#Filter过滤器：" class="headerlink" title="Filter过滤器："></a>Filter过滤器：</h3><p>过滤器实际上就是对web资源进行拦截，做一些处理后再交给下一个过滤器或servlet处理</p>
<p>通常都是用来拦截request进行处理的，也可以对返回的response进行拦截处理</p>
<p>​                                                        <strong>流程图如下</strong></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/img-filter-01.png" alt="img-filter-01"></p>
<p><strong>应用场景</strong></p>
<ul>
<li>自动登录</li>
<li>统一设置编码格式</li>
<li>访问权限控制</li>
<li>敏感字符过滤等</li>
</ul>
<h3 id="创建Filter"><a href="#创建Filter" class="headerlink" title="创建Filter"></a>创建Filter</h3><p>在Servlet中我们一般都会对request和response中的字符集编码进行配置，如果Servlet过多字符集编码发生变化时修改起码会很麻烦，这些通用的字符集编码配置等工作我们可以放到Filter中来实现。</p>
<p>下面我们来创建一个处理字符集编码的Filter。</p>
<p>用IDEA来实现</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013192848760.png" alt="image-20211013192848760"></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013192919455.png" alt="image-20211013192919455"></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013193157630.png" alt="image-20211013193157630"></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013193322355.png" alt="image-20211013193322355"></p>
<p>找到Web-app然后点击</p>
<p>把web导入</p>
<p><strong>1、在porm文件中导入自己想要的依赖包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-filter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--连接数据库--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><strong>项目包结构</strong></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013193734143.png" alt="image-20211013193734143"></p>
<p><strong>2、编写过滤器</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wang.filter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEndingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//chain:链</span></span><br><span class="line">    <span class="comment">/*1、过滤中所有代码，在过滤特定的请求的时候会执行</span></span><br><span class="line"><span class="comment">      2、必须让过滤器继续同行 */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEndingFilter执行前...&quot;</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        System.out.println(<span class="string">&quot;CharacterEndingFilter执行后...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//销毁</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3、在web.xml中注册</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShowServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.wang.servlet.ShowServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShowServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ShowServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/show<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEndingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.wang.filter.CharacterEndingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CharacterEndingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>4、在编写一个servlet测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShowServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        resp.getWriter().write(<span class="string">&quot;你好，世界！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>5、Tomcat配置</strong></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013194532172.png" alt="image-20211013194532172"></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013194614441.png" alt="image-20211013194614441"></p>
<p><strong>6、启动服务即可</strong></p>
<p>在浏览器中输入/show ， 发现乱码，因为/show配置时不经过过滤器</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013194849191.png" alt="image-20211013194849191"></p>
<p>在浏览器中输入<a href="http://localhost:8081/servlet/show%EF%BC%8C%E5%8F%91%E7%8E%B0%E6%AD%A3%E5%B8%B8%E6%98%BE%E7%A4%BA%EF%BC%8C%E8%AF%B4%E6%98%8E%E8%BF%87%E6%BB%A4%E5%99%A8%E5%8F%91%E6%8C%A5%E4%BD%9C%E7%94%A8">http://localhost:8081/servlet/show，发现正常显示，说明过滤器发挥作用</a></p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211013194913487.png" alt="image-20211013194913487"></p>
<p><strong>结束啦  时间是2021年10月13日19:50:47</strong></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/Blog/2021/10/25/Linux%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">title: Linux概述</span><br></pre></td></tr></table></figure>

<h1 id="Linux概述"><a href="#Linux概述" class="headerlink" title="Linux概述"></a>Linux概述</h1><p>Linux，全称GNU/Linux，是一种免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUNIX/9032872">类UNIX</a>操作系统，其内核由<a href="https://baike.baidu.com/item/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%9C%AC%E7%BA%B3%E7%AC%AC%E5%85%8B%E7%89%B9%C2%B7%E6%89%98%E7%93%A6%E5%85%B9/1034429">林纳斯·本纳第克特·托瓦兹</a>于1991年10月5日首次发布，它主要受到<a href="https://baike.baidu.com/item/Minix/7106045">Minix</a>和Unix思想的启发，是一个基于<a href="https://baike.baidu.com/item/POSIX">POSIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1/1011764">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B/1190404">多线程</a>和多<a href="https://baike.baidu.com/item/CPU">CPU</a>的操作系统。它能运行主要的<a href="https://baike.baidu.com/item/Unix/219943">Unix</a>工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D">64位</a>硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。Linux有上百种不同的发行版，如基于社区开发的<a href="https://baike.baidu.com/item/debian/748667">debian</a>、<a href="https://baike.baidu.com/item/archlinux/10857530">archlinux</a>，和基于商业开发的[Red Hat Enterprise Linux](<a href="https://baike.baidu.com/item/Red">https://baike.baidu.com/item/Red</a> Hat Enterprise Linux/10770503)、<a href="https://baike.baidu.com/item/SUSE/60409">SUSE</a>、[Oracle Linux](<a href="https://baike.baidu.com/item/Oracle">https://baike.baidu.com/item/Oracle</a> Linux/6876458)等。</p>
<p><img src="/Blog/Linux%E6%A6%82%E8%BF%B0/linux%E5%AE%A0%E7%89%A9.png" alt="linux宠物"></p>
<p>Linux吉祥物Tux</p>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>Linux，全称GNU/Linux，是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX的多用户、多任务、支持多线程和多<a href="https://baike.baidu.com/item/CPU/120556">CPU</a>的操作系统。伴随着<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186">互联网</a>的发展，Linux得到了来自全世界软件爱好者、组织、公司的支持。它除了在服务器方面保持着强劲的发展势头以外，在个人电脑、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F/575465">嵌入式</a>系统上都有着长足的进步。使用者不仅可以直观地获取该操作系统的实现机制，而且可以根据自身的需要来修改完善Linux，使其最大化地适应用户的需要。 [1] </p>
<p>Linux不仅系统性能稳定，而且是<a href="https://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6/8105369">开源软件</a>。其核心防火墙组件性能高效、配置简单，保证了系统的安全。在很多企业网络中，为了追求速度和安全，Linux不仅仅是被网络运维人员当作服务器使用，甚至当作网络防火墙，这是Linux的一大亮点。 [2] </p>
<p>Linux具有<a href="https://baike.baidu.com/item/%E5%BC%80%E6%94%BE%E6%BA%90%E7%A0%81/7176422">开放源码</a>、没有版权、技术社区用户多等特点，开放源码使得用户可以自由裁剪，灵活性高，功能强大，成本低。尤其系统中内嵌网络协议栈，经过适当的配置就可实现路由器的功能。这些特点使得Linux成为开发路由交换设备的理想开发平台。 [3] </p>
<p><img src="/Blog/Linux%E6%A6%82%E8%BF%B0/image-20211025170731191.png" alt="image-20211025170731191"></p>
]]></content>
  </entry>
  <entry>
    <title>Linux实操篇-vi和vim编辑器</title>
    <url>/Blog/2021/10/26/Linux%E5%AE%9E%E6%93%8D%E7%AF%87-vi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>今天学习了linux实操vi/vim编辑器。</p>
<h2 id="vi-vim-基本使用方法"><a href="#vi-vim-基本使用方法" class="headerlink" title="vi/vim 基本使用方法"></a>vi/vim 基本使用方法</h2><p>​        本文介绍了vi (vim)的基本使用方法，但对于普通用户来说基本上够了！i/vim的区别简单点来说，它们都是多模式编辑器，不同的是vim 是vi的升级版本，它不仅兼容vi的所有指令，而且还有一些新的特性在里面。例如语法加亮，可视化操作不仅可以在终端运行，也可以运行于x window、 mac os、 windows。</p>
<p>​        vi编辑器是所有Unix及Linux系统下标准的编辑器，它的强大不逊色于任何最新的文本编辑器，这里只是简单地介绍一下它的用法和一小部分指令。由于对Unix及 Linux系统的任何版本，vi编辑器是完全相同的，因此您可以在其他任何介绍vi的地方进一步了解它。Vi也是Linux中最基本的文本编辑器，学会它后，您将在Linux的世界里畅行无阻。</p>
<h3 id="1、vi的基本概念"><a href="#1、vi的基本概念" class="headerlink" title="1、vi的基本概念"></a>1、vi的基本概念</h3><p>基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下：</p>
<p>(1)命令行模式command mode）<br>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。</p>
<p>(2)插入模式（Insert mode）<br>只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。</p>
<p>(3) 底行模式（last line mode）<br>将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等</p>
<h3 id="2、vi的基本操作"><a href="#2、vi的基本操作" class="headerlink" title="2、vi的基本操作"></a>2、vi的基本操作</h3><p>(a) 进入vi<br>在系统提示符号输入vi及文件名称后，就进入vi全屏幕编辑画面：$ vi myfile。不过有一点要特别注意，就是您进入vi之后，是处于「命令行模式（command mode）」，您要切换到「插入模式（Insert mode）」才能够输入文字。初次使用vi的人都会想先用上下左右键移动光标，结果电脑一直哔哔叫，把自己气个半死，所以进入vi后，先不要乱动，转换到「插入模式（Insert mode）」再说吧！</p>
<p>(b) 切换至插入模式（Insert mode）编辑文件<br>在「命令行模式（command mode）」下按一下字母「i」就可以进入「插入模式（Insert mode）」，这时候你就可以开始输入文字了。</p>
<p>(c) Insert 的切换<br>您目前处于「插入模式（Insert mode）」，您就只能一直输入文字，如果您发现输错了字！想用光标键往回移动，将该字删除，就要先按一下「ESC」键转到「命令行模式（command mode）」再删除文字。</p>
<dl><dt>(d) 退出vi及保存文件<br>在「命令行模式（command mode）」下，按一下「：」冒号键进入「Last line mode」，例如：<br>: w filename （输入 「w filename」将文章以指定的文件名filename保存）<br>: wq (输入「wq」，存盘并退出vi)</dt><dd>q! (输入q!， 不存盘强制退出vi)</dd></dl><h3 id="3、命令行模式（command-mode）功能键"><a href="#3、命令行模式（command-mode）功能键" class="headerlink" title="3、命令行模式（command mode）功能键"></a>3、命令行模式（command mode）功能键</h3><p>1）. 插入模式<br>按「i」切换进入插入模式「insert mode」，按“i”进入插入模式后是从光标当前位置开始输入文件；<br>按「a」进入插入模式后，是从目前光标所在位置的下一个位置开始输入文字；<br>按「o」进入插入模式后，是插入新的一行，从行首开始输入文字。</p>
<p>2）. 从插入模式切换为命令行模式<br>按「ESC」键。</p>
<p>3）. 移动光标<br>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。<br>按「ctrl」+「b」：屏幕往“后”移动一页。<br>按「ctrl」+「f」：屏幕往“前”移动一页。<br>按「ctrl」+「u」：屏幕往“后”移动半页。<br>按「ctrl」+「d」：屏幕往“前”移动半页。<br>按数字「0」：移到文章的开头。<br>按「G」：移动到文章的最后。<br>按「$」：移动到光标所在行的“行尾”。<br>按「^」：移动到光标所在行的“行首”<br>按「w」：光标跳到下个字的开头<br>按「e」：光标跳到下个字的字尾<br>按「b」：光标回到上个字的开头<br>按「#l」：光标移到该行的第#个位置，如：5l,56l。</p>
<p>4）. 删除文字<br>「x」：每按一次，删除光标所在位置的“后面”一个字符。<br>「#x」：例如，「6x」表示删除光标所在位置的“后面”6个字符。<br>「X」：大写的X，每按一次，删除光标所在位置的“前面”一个字符。<br>「#X」：例如，「20X」表示删除光标所在位置的“前面”20个字符。<br>「dd」：删除光标所在行。<br>「#dd」：从光标所在行开始删除#行</p>
<p>5）. 复制<br>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。<br>「#yw」：复制#个字到缓冲区<br>「yy」：复制光标所在行到缓冲区。<br>「#yy」：例如，「6yy」表示拷贝从光标所在的该行“往下数”6行文字。<br>「p」：将缓冲区内的字符贴到光标所在位置。注意：所有与“y”有关的复制命令都必须与“p”配合才能完成复制与粘贴功能。</p>
<p>6）. 替换<br>「r」：替换光标所在处的字符。<br>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p>
<p>7）. 回复上一次操作<br>「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。</p>
<p>8）. 更改<br>「cw」：更改光标所在处的字到字尾处<br>「c#w」：例如，「c3w」表示更改3个字</p>
<p>9）. 跳至指定的行<br>「ctrl」+「g」列出光标所在行的行号。<br>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p>
<h3 id="4、Last-line-mode下命令简介"><a href="#4、Last-line-mode下命令简介" class="headerlink" title="4、Last line mode下命令简介"></a>4、Last line mode下命令简介</h3><p><strong>在使用「last line mode」之前，请记住先按「ESC」键确定您已经处于「command mode」下后，再按「：」冒号即可进入「last line mode」。</strong></p>
<p>A) 列出行号<br>「set nu」：输入「set nu」后，会在文件中的每一行前面列出行号。</p>
<p>B) 跳到文件中的某一行<br>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了，如输入数字15，再回车，就会跳到文章的第15行。</p>
<p>C) 查找字符<br>「/关键字」：先按「/」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往后寻找到您要的关键字为止。<br>「?关键字」：先按「?」键，再输入您想寻找的字符，如果第一次找的关键字不是您想要的，可以一直按「n」会往前寻找到您要的关键字为止。</p>
<p>D) 保存文件<br>「w」：在冒号输入字母「w」就可以将文件保存起来。</p>
<p>E) 离开vi<br>「q」：按「q」就是退出，如果无法离开vi，可以在「q」后跟一个「!」强制离开vi。<br>「qw」：一般建议离开时，搭配「w」一起使用，这样在退出的时候还可以保存文件。</p>
<h3 id="5、vi命令列表"><a href="#5、vi命令列表" class="headerlink" title="5、vi命令列表"></a>5、vi命令列表</h3><p>(1) 下表列出命令模式下的一些键的功能：</p>
<p>h左移光标一个字符<br>l右移光标一个字符<br>k光标上移一行<br>j光标下移一行<br>^光标移动至行首<br>0数字“0”，光标移至文章的开头<br>G光标移至文章的最后<br>$光标移动至行尾<br>Ctrl+f向前翻屏<br>Ctrl+b向后翻屏<br>Ctrl+d向前翻半屏<br>Ctrl+u向后翻半屏<br>i在光标位置前插入字符<br>a在光标所在位置的后一个字符开始增加<br>o插入新的一行，从行首开始输入<br>ESC从输入状态退至命令状态<br>x删除光标后面的字符<br>#x删除光标后的＃个字符<br>X(大写X)，删除光标前面的字符<br>#X删除光标前面的#个字符<br>dd删除光标所在的行<br>#dd删除从光标所在行数的#行<br>yw复制光标所在位置的一个字<br>#yw复制光标所在位置的#个字<br>yy复制光标所在位置的一行<br>#yy复制从光标所在行数的#行<br>p粘贴<br>u取消操作<br>cw更改光标所在位置的一个字<br>#cw更改光标所在位置的#个字</p>
<p>(2) 下表列出行命令模式下的一些指令<br>w filename储存正在编辑的文件为filename<br>wq filename储存正在编辑的文件为filename，并退出vi<br>q!放弃所有修改，退出vi<br>set nu显示行号<br>/或?查找，在/后输入要查找的内容<br>n与/或?一起使用，如果查找的内容不是想要找的关键字，按n或向后（与/联用）或向前（与?联用）继续查找，直到找到为止。</p>
<p>​                                                                <strong>高手总结的图</strong></p>
<p><img src="/Blog/Linux%E5%AE%9E%E6%93%8D%E7%AF%87-vi%E5%92%8Cvim%E7%BC%96%E8%BE%91%E5%99%A8/vim.jpg" alt="img"></p>
<p><a href="http://www.lupaworld.com/?uid-296380-action-viewspace-itemid-118973"></a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基础篇-目录结构</title>
    <url>/Blog/2021/10/26/Linux%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>​        今天学习了Linux目录结构，写个总结的blog，加深记忆。</p>
<h2 id="第四章Linux目录结构"><a href="#第四章Linux目录结构" class="headerlink" title="第四章Linux目录结构"></a>第四章Linux目录结构</h2><h3 id="4-1-Linux目录结构"><a href="#4-1-Linux目录结构" class="headerlink" title="4.1 Linux目录结构"></a>4.1 Linux目录结构</h3><h4 id="4-1-1基本介绍"><a href="#4-1-1基本介绍" class="headerlink" title="4.1.1基本介绍"></a>4.1.1基本介绍</h4><ol>
<li><p>Linux的文件系统是采用级层式的树状目录，在此结构上的最上层是根目录“/”,然后在此目录下再创建其他的目录。</p>
</li>
<li><p>深刻理解Linux树状文件目录是非常重要的</p>
</li>
<li><p>记住一句经典的话：在Linux世界里，一切皆文件！！！</p>
</li>
<li><p>来个示意图</p>
<p><img src="/Blog/Linux%E5%9F%BA%E7%A1%80%E7%AF%87-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/image-20211026164043924.png" alt="image-20211026164043924"></p>
</li>
</ol>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/06095713-85c1021200224bcc8c5ff0f2275260c5.png" alt="img"></p>
<h4 id="4-2-具体的目录结构（知道即可）"><a href="#4-2-具体的目录结构（知道即可）" class="headerlink" title="4.2 具体的目录结构（知道即可）"></a>4.2 具体的目录结构（知道即可）</h4><ol>
<li><p>root — 启动<a href="http://linux-wiki.cn/wiki/Linux">Linux</a>时使用的一些核心文件。如操作系统<a href="http://linux-wiki.cn/index.php?title=%E5%86%85%E6%A0%B8&action=edit&redlink=1">内核</a>、引导程序<a href="http://linux-wiki.cn/wiki/Category:Grub">Grub</a>等。</p>
</li>
<li><p>home — </p>
<p>存储普通用户的个人文件</p>
<ul>
<li>ftp — 用户所有服务</li>
<li>httpd</li>
<li>samba</li>
<li>user1</li>
<li>user2</li>
</ul>
</li>
<li><p>bin — 系统启动时需要的执行文件（二进制）</p>
</li>
<li><p>sbin — 可执行程序的目录，但大多存放涉及系统管理的命令。只有root权限才能执行</p>
</li>
<li><p>proc — 虚拟，存在linux内核镜像；保存所有内核参数以及系统配置信息</p>
<ul>
<li>1 — 进程编号</li>
</ul>
</li>
<li><p>usr — 用户目录，存放</p>
<p>用户级的文件</p>
<ul>
<li>bin — 几乎所有用户所用命令，另外存在与/bin，/usr/local/bin</li>
<li>sbin — 系统管理员命令，与用户相关，例如，大部分服务器程序</li>
<li>include — 存放C/C++头文件的目录</li>
<li>lib — 固定的程序数据</li>
<li>local — 本地安装软件保存位置</li>
<li>man — 手工生成的目录</li>
<li>info — 信息文档</li>
<li>doc — 不同包文档信息</li>
<li>tmp</li>
<li>X11R6 — 该目录用于保存运行X-Window所需的所有文件。该目录中还包含用于运行GUI要的配置文件和二进制文件。</li>
<li>X386　— 功能同X11R6，X11 发行版5 的系统文件</li>
</ul>
</li>
<li><p>boot — 引导加载器所需文件，系统所需图片保存于此</p>
</li>
<li><p>lib —根文件系统目录下程序和核心模块的公共库</p>
<ul>
<li>modules — 可加载模块，系统崩溃后重启所需模块</li>
</ul>
</li>
<li><p>dev — 设备文件目录</p>
</li>
<li><p>etc — 配置文件</p>
<ul>
<li>skel — home目录建立，该目录初始化</li>
<li>sysconfig — 网络，时间，键盘等配置目录</li>
</ul>
</li>
<li><p>var</p>
<ul>
<li>file</li>
<li>lib — 该目录下的文件在系统运行时，会改变</li>
<li>local — 安装在/usr/local的程序数据，变化的</li>
<li>lock — 文件使用特定外设或文件，为其上锁，其他文件暂时不能访问</li>
<li>log — 记录日志</li>
<li>run — 系统运行合法信息</li>
<li>spool — 打印机、邮件、代理服务器等假脱机目录</li>
<li>tmp</li>
<li>catman — 缓存目录</li>
</ul>
</li>
<li><p>mnt — 临时用于挂载文件系统的地方。一般情况下这个目录是空的，而在我们将要挂载分区时在这个目录下建立目录，再将我们将要访问的设备<a href="http://linux-wiki.cn/wiki/Category:Mount">挂载</a>在这个目录上，这样我们就可访问文件了。</p>
</li>
<li><p>tmp — 临时文件目录，系统启动后的临时文件存放在/var/tmp</p>
</li>
<li><p>lost+found — 在文件系统修复时恢复的文件</p>
</li>
</ol>
<p><strong>/：</strong>根目录，一般根目录下只存放目录，不要存放文件，/etc、/bin、/dev、/lib、/sbin应该和根目录放置在一个分区中</p>
<p>**/bin:/usr/bin:**可执行二进制文件的目录，如常用的命令ls、tar、mv、cat等。</p>
<p><strong>/boot：</strong>放置linux系统启动时用到的一些文件。/boot/vmlinuz为linux的内核文件，以及/boot/gurb。<strong>建议单独分区，分区大小100M即可</strong></p>
<p><strong>/dev：</strong>存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱mount /dev/cdrom /mnt。</p>
<p><strong>/etc：</strong>系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有/etc/inittab、/etc/fstab、/etc/init.d、/etc/X11、/etc/sysconfig、/etc/xinetd.d修改配置文件之前记得备份。</p>
<p>注：/etc/X11存放与x windows有关的设置。</p>
<p><strong>/home：</strong>系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下，<del>表示当前用户的家目录，</del>test表示用户test的家目录。<strong>建议单独分区，并设置较大的磁盘空间，方便用户存放数据</strong></p>
<p><strong>/lib:/usr/lib:/usr/local/lib：</strong>系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助，比较重要的目录为/lib/modules。</p>
<p><strong>/lost+fount：</strong>系统异常产生错误时，会将一些遗失的片段放置于此目录下，通常这个目录会自动出现在装置目录下。如加载硬盘于/disk 中，此目录下就会自动产生目录/disk/lost+found</p>
<p><strong>/mnt:/media：</strong>光盘默认挂载点，通常光盘挂载于/mnt/cdrom下，也不一定，可以选择任意位置进行挂载。</p>
<p><strong>/opt：</strong>给主机额外安装软件所摆放的目录。如：FC4使用的Fedora 社群开发软件，如果想要自行安装新的KDE 桌面软件，可以将该软件安装在该目录下。以前的 Linux 系统中，习惯放置在 /usr/local 目录下</p>
<p><strong>/proc：</strong>此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的目录有/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/*等</p>
<p><strong>/root：</strong>系统管理员root的家目录，系统第一个启动的分区为/，所以最好将/root和/放置在一个分区下。</p>
<p><strong>/sbin:/usr/sbin:/usr/local/sbin：</strong>放置系统管理员使用的可执行命令，如fdisk、shutdown、mount等。与/bin不同的是，这几个目录是给系统管理员root使用的命令，一般用户只能”查看”而不能设置和使用。</p>
<p><strong>/tmp：</strong>一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</p>
<p><strong>/srv：</strong>服务启动之后需要访问的数据目录，如www服务需要访问的网页数据存放在/srv/www内</p>
<p><strong>/usr：</strong>应用程序存放目录，**/usr/bin<strong>存放应用程序，</strong>/usr/share<strong>存放共享数据，</strong>/usr/lib<strong>存放不能直接运行的，却是许多程序运行所必需的一些函数库文件。</strong>/usr/local:<strong>存放软件升级包。</strong>/usr/share/doc:<strong>系统说明文件存放目录。</strong>/usr/share/man:** 程序说明文件存放目录，使用 man ls时会查询/usr/share/man/man1/ls.1.gz的内容<strong>建议单独分区，设置较大的磁盘空间</strong></p>
<p><strong>/var：</strong>放置系统执行过程中经常变化的文件，如随时更改的日志文件/var/log，**/var/log/message：<strong>所有的登录文件存放目录，</strong>/var/spool/mail<strong>：邮件存放的目录，</strong>/var/run:<strong>程序或服务启动后，其PID存放在该目录下。</strong>建议单独分区，设置较大的磁盘空间**</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux_运行级别</title>
    <url>/Blog/2021/10/27/Linux-%E8%BF%90%E8%A1%8C%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<h2 id="Linux运行级别"><a href="#Linux运行级别" class="headerlink" title="Linux运行级别"></a>Linux运行级别</h2><p>今天学习了Linux运行级别，记录一下有哪些运行级别。</p>
<h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><h4 id="运行级别说明："><a href="#运行级别说明：" class="headerlink" title="运行级别说明："></a>运行级别说明：</h4><ul>
<li>0 ：关机</li>
<li> 1 ：单用户</li>
<li> 2 ：多用户状态没有网络服务</li>
<li> 3 ：多用户状态有网络服务</li>
<li> 4 ：系统未使用保留给用户</li>
<li> 5 ：图形界面</li>
<li> 6： 系统重启</li>
</ul>
<ul>
<li><p>应用案例</p>
<p>命令 ：init[0123456]</p>
<p>通过init来切换不同的运行级别，比如5-3，然后关机</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211027145243672-16353186339641.png" alt="image-20211027145243672-16353186339641"></p>
</li>
</ul>
<h4 id="指定运行级别"><a href="#指定运行级别" class="headerlink" title="指定运行级别"></a>指定运行级别</h4><ul>
<li><p>CentOS7后运行级别说明</p>
<p>在CentOS7以前，/etc/inittab文件中</p>
<p>进行了简化，如下：</p>
<p><em><strong>multi-user.taget</strong></em>：analogous to runlevel 3</p>
<p><em><strong>graphical.target:</strong></em> analogous to runlevel 5</p>
</li>
<li><p>#To view current default target, run:</p>
<p>systemctl set-defalut</p>
<p>#To set a deault target,run:</p>
<p>systemtl set-default TARGET.target</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 实操篇-常用指令</title>
    <url>/Blog/2021/10/29/Linux-%E5%AE%9E%E6%93%8D%E7%AF%87-%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="第九章Linux实操篇—常用指令"><a href="#第九章Linux实操篇—常用指令" class="headerlink" title="第九章Linux实操篇—常用指令"></a>第九章Linux实操篇—常用指令</h2><p>今天学习了linux常用指令，写个blog，加深记忆。</p>
<h3 id="一、指定运行级别"><a href="#一、指定运行级别" class="headerlink" title="一、指定运行级别"></a>一、指定运行级别</h3><h4 id="1-1基本介绍"><a href="#1-1基本介绍" class="headerlink" title="1.1基本介绍"></a>1.1基本介绍</h4><p>运行级别说明：</p>
<ul>
<li>0：关机</li>
<li>1：单用户【找回丢失密码】</li>
<li>2：多用户状态没有网络服务 </li>
<li>3：<strong>多用户状态有网络服务</strong></li>
<li>4：系统未使用保留给用户</li>
<li>5：图形界面</li>
<li>6：系统重启</li>
</ul>
<p>常用是3和5，也可以默认运行级别</p>
<h4 id="1-2、应用实例"><a href="#1-2、应用实例" class="headerlink" title="1.2、应用实例"></a>1.2、应用实例</h4><p>命令：init[0123456]</p>
<h4 id="1-3、CentOS7后运行级别说明"><a href="#1-3、CentOS7后运行级别说明" class="headerlink" title="1.3、CentOS7后运行级别说明"></a>1.3、CentOS7后运行级别说明</h4><p>在CentOS7 以前， /etc/inittab文件中进行了简化，如下</p>
<p>在CentOS7以前，/etc/inittab文件中</p>
<p>进行了简化，如下：</p>
<p><em><strong>multi-user.taget</strong></em>：analogous to runlevel 3</p>
<p><em><strong>graphical.target:</strong></em> analogous to runlevel 5</p>
<p>#To view current default target, run:</p>
<p>systemctl set-defalut</p>
<p>#To set a deault target,run:</p>
<p>systemtl set-default TARGET.target</p>
<h3 id="二、帮助指令"><a href="#二、帮助指令" class="headerlink" title="二、帮助指令"></a>二、帮助指令</h3><h4 id="2-1-man获取帮助信息"><a href="#2-1-man获取帮助信息" class="headerlink" title="2.1 man获取帮助信息"></a>2.1 man获取帮助信息</h4><p>基本语法：man[命令或者配置文件]（功能描述 ：获得shell内置命令的帮助信息）</p>
<p>实操：查看ls命令下的帮助信息 ：<strong>man ls</strong></p>
<h4 id="2-2-help指令"><a href="#2-2-help指令" class="headerlink" title="2.2 help指令"></a>2.2 help指令</h4><p>基本语法 ：help 命令（功能描述：获得shell内置命令的帮助信息）</p>
<p>实操：查看cd命令的帮助信息：<strong>help cd</strong></p>
<h3 id="三、文件目录类"><a href="#三、文件目录类" class="headerlink" title="三、文件目录类"></a>三、文件目录类</h3><h4 id="3-1-pwd指令"><a href="#3-1-pwd指令" class="headerlink" title="3.1 pwd指令"></a>3.1 pwd指令</h4><p>基本语法：pwd （功能描述：显示当前工作目录的绝对路径）</p>
<h4 id="3-2-ls指令"><a href="#3-2-ls指令" class="headerlink" title="3.2 ls指令"></a>3.2 ls指令</h4><p>基本语法：ls [选项] [目录或是文件]</p>
<p>常用选项：</p>
<ul>
<li>-a:显示当前目录所有文件和目录，包括隐藏的。</li>
<li>-l:以列表的方式显示信息</li>
</ul>
<h4 id="3-3-cd指令"><a href="#3-3-cd指令" class="headerlink" title="3.3 cd指令"></a>3.3 cd指令</h4><p>基本语法： cd[参数]（功能描述：切换到指定目录）</p>
<p>理解：绝对路径和相对路径</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211030091827694.png" alt="image-20211030091827694"></p>
<p>cd~ 或者cd: 回到自己的家目录，比如家目录root， cd~到 root。</p>
<p>cd.. 回到当前目录的上一级</p>
<p>案例：</p>
<ol>
<li>使用绝对路径切换到root目录： cd /root(cd和/之间有一个空格)</li>
<li>使用绝对路径到/root目录，比如在/home/tom， cd ../../root</li>
<li>表示回到当前目录的上一级目录， cd ..</li>
<li>回到家目录， cd ~</li>
</ol>
<h4 id="3-4-mkdir-指令"><a href="#3-4-mkdir-指令" class="headerlink" title="3.4 mkdir 指令"></a>3.4 mkdir 指令</h4><ul>
<li><p>mkdir 指令用于创建目录</p>
<p>基本语法：mkdir [选项] 要创建的目录</p>
</li>
<li><p>常用选项</p>
<p>-p:创建多级目录</p>
</li>
<li><p>应用实例</p>
<p>案例1：常见一个目录 /home/dog</p>
<p>mkdir /home/dog</p>
<p>案例2：创建多级目录 /home/animal/tiger</p>
<p>mkdir -p /home/animal/tiger</p>
</li>
</ul>
<h4 id="3-5-rmdir-指令删除空目录"><a href="#3-5-rmdir-指令删除空目录" class="headerlink" title="3.5 rmdir 指令删除空目录"></a>3.5 rmdir 指令删除空目录</h4><ul>
<li><p>基本语法</p>
<p>​                rmdir [选项] 要删除的空目录</p>
</li>
<li><p>应用案例：</p>
<p>​                删除一个空目录 /home/dog</p>
<p>​                rmdir  /home/dog</p>
</li>
<li><p>使用细节</p>
<p>rmdir 删除的是空目录，如果目录下有内容时无法删除的</p>
<p>如果需要删除非空目录，需要使用 rm -rf 要删除的目录</p>
<p>rm -rf /home/animal</p>
</li>
</ul>
<h4 id="3-6-touch指令"><a href="#3-6-touch指令" class="headerlink" title="3.6 touch指令"></a>3.6 touch指令</h4><ul>
<li><p>touch 指令创建空文件</p>
</li>
<li><p>基本语法:  touch 文件名称</p>
</li>
<li><p>案例：在/home目录下创建一个空文件 hello.txt   </p>
<p>第一步切换目录 cd /home  </p>
<p>第二步创建文件 touch hello.txt</p>
</li>
</ul>
<h4 id="3-7-cp指令"><a href="#3-7-cp指令" class="headerlink" title="3.7 cp指令"></a>3.7 cp指令</h4><p>cp 指令拷贝文件到指定目录    </p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211030095436392.png" alt="image-20211030095436392"></p>
<ul>
<li><p>基本语法 cp [选项] source dest</p>
</li>
<li><p>常用选项</p>
<p>-r : 递归复制整个文件夹</p>
</li>
<li><p>应用案例</p>
<p>案例一：将 /home/hello.txt 拷贝到 /home/bbb 目录下</p>
<p>cp  hello.txt/home/bbb</p>
<p>案例二：递归复制到整个文件夹，将 /home/bbb整个目录，拷贝到 /opt</p>
<p>cp -r /home/bbb/opt</p>
</li>
<li><p>使用细节</p>
<p>强制覆盖不提醒的方法： \cp             \cp -r /home/bbb/opt</p>
</li>
</ul>
<h4 id="3-8-rm-指令"><a href="#3-8-rm-指令" class="headerlink" title="3.8 rm 指令"></a>3.8 rm 指令</h4><p>说明：rm 指令移除文件或目录</p>
<ul>
<li><p>基本语法</p>
<p>rm  [选项]  要删除的文件或目录</p>
</li>
<li><p>常用选项</p>
<p>-r ：递归删除整个文件夹</p>
<p>-f ：强制删除不提示</p>
</li>
<li><p>案例</p>
<ol>
<li>将/home/hello.txt 删除  rm /home/hello.txt</li>
<li>递归删除整个文件夹/home/bb     rm - rf /home/bbb[删除整个文件夹不提醒]</li>
</ol>
</li>
<li><p>使用细节</p>
<p>​            强制删除不提示的方法：带上 -f参数即可</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>Linux指令</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/Blog/2021/11/02/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B51-%E8%AD%A6%E5%AF%9F%E5%92%8C%E5%9C%9F%E5%8C%AA%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<p>经过学习了<strong>第十章Linux实操篇-组管理和权限管理</strong>，今天用个例子来总结一下最近学习</p>
<p>废话不多说，上图：</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211102151118888.png" alt="image-20211102151118888"></p>
<ol>
<li><p>创建组</p>
<p>groupadd police</p>
<p>groupadd bandit</p>
</li>
<li><p>创建用户</p>
<p>useradd -g police jack</p>
<p>useradd -g police jerry</p>
<p>useradd -g bandit xh</p>
<p>useradd -g bandit xq</p>
</li>
<li><p>jack创建一个文件，自己可以读r写w，本组人员可以读，其他组没人有权限</p>
<p>首先jack登录，在Linux下先设定jack密码</p>
<p>passwd jack</p>
<p>然后输入自己设定的密码即可</p>
<p>登录jack</p>
<p>vim jack.txt;</p>
<p>chmod 640 jack.txt</p>
</li>
<li><p>jack 修改该文件，让其他组人可以读，本组人可以读写</p>
<p>chmod o=r,g=r jack.txt</p>
</li>
<li><p>xh投靠警察，看看是否可以读写</p>
<p>这一步需要调用级别更高的用户，咱们使用root</p>
<p>登录root用户</p>
<p>然后进行修改：usermod -g police xh</p>
</li>
<li><p>测试xh是否可以读写，xq是否可以呢？小结论，就是如果要对目录内的文件进行操作，需要有对该目录的相应权限。</p>
</li>
<li><p>示意图</p>
<p><img src="https://raw.githubusercontent.com/JonefyWang/img/master/blogimg/image-20211102152210365.png" alt="image-20211102152210365"></p>
</li>
</ol>
]]></content>
  </entry>
</search>
